/**
 * 设计模式
 *
 * ## 设计模式六大原则
 *
 * ### 开闭原则 (Open-Close Principle（OCP）)
 *  对扩展开放，对修改关闭
 *  主张“抽象”和“多态”。维持设计的封装性“抽象”是语言提供的功能，“多态”由继承语意实现。
 *
 * ### 单一职责原则 (Single-Responsibility Principle（SRP）)
 *  对一个类而言，应该仅有一个引起它变化的原因。
 *  如果存在多于一个动机去改变一个类，那么这个类就具有多于一个的职责，就应该把多余的职责分离出去，再去创建一些类来完成每一个职责。
 *
 * ### 里氏代换原则 (Liskov Substitution Principle)
 *  子类可以扩展父类的功能，但是不能改变父类原有的功能。
 *
 *  如何去度量继承关系中的质量？
 *  继承必须确保超类（父类）所拥有的性质在子类中仍然成立。
 *
 *  在面向对象的思想中，一个对象就是一组状态和一系列行为的组合体。
 *  状态是对象的内在特性，行为是对象的外在特性。LSP表述的就是在同一继承体系中的队形应该具有共同的行为特征。
 *
 * ### 依赖倒置原则 （Dependence Inversion Principle（DIP））
 *  是一个类与类之间的调用规则。这里的依赖就是代码中的耦合。
 *  高层模块不应该依赖底层模块，二者都应该依赖其抽象了；抽象不依赖细节；细节应该依赖抽象。接口编程。
 *
 *  主要思想就是：如果一个类中的一个成员或者参数成为一个具体的类型，那么这个类就依赖这个具体类型。
 *  如果在一个继承结构中，上层类中的一个成员或者参数为一个下层类型，那么就是这个继承结构高层依赖底层，就要尽量面向抽象或者接口编程。
 *
 * ### 接口隔离原则 （Interface Segregation Principle）
 *  用于恰当的划分角色和接口
 *  具有两种含义：1、用户不应该依赖它不需要的接口；2、类间的依赖关系应该建立在最小的的接口上。
 *
 *  一句话：建立单一接口，代替庞大臃肿的接口。通俗来说就是：接口尽量细化，同时保证接口中的方法尽量的少。
 *
 *  一个接口中包含太多的行为时，会导致它们与客户端的不正常依赖关系，要做的就是分离接口，从而实现解耦。
 *
 *  但是接口的设计是有限度的。接口的设计粒度越小系统越灵活，这是事实，但是接口太多这也就使得结构复杂，维护难度大。
 *  因此实际中，怎样把握就靠开发的经验和常识了。
 *
 * ### 迪米特法则（Law of Demeter）
 *  又称最少知识原则（Least Knowledge Principle 简写LKP），
 *  就是说一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。英文简写为: LoD
 *
 *  一个对象应该对其他对象有最少的了解。
 *  迪米特原则不希望类与类之间建立直接的接触。如果真的需要有联系，那么就通过它们的友元类来传达。
 *
 *  但是应用迪米特原则很可能会造成一个后果：
 *  系统会存在大量的中介类，这些类（如上面的售楼处类）之所以存在是为了传递类之间的相互调用关系，这就一定会程度上增加了系统的复杂度。
 *
 *  迪米特原则核心观念就是：类间解耦，弱耦合。
 */
package me.sunny.demo.dp;