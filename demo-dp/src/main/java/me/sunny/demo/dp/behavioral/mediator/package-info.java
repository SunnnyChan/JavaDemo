/**
 * 中介者模式(Mediator)
 *
 * 用来降低多个对象和类之间的通信复杂性
 * 如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对多关系，将导致关系及其复杂，这些对象称为"同事对象"，
 * 可以引入一个中介者对象，使各个同事对象只跟中介者对象打交道，将复杂的网络结构化解为星型结构。
 *
 * 中介者模式是“迪米特法则”的一个典型应用
 *
 * 本质：解耦多个同事对象之间的交互关系。每个对象都持有中介者对象的引用，只跟中介者对象打交道。
 *
 * 意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
 *
 * 优点：
 * 降低了类的复杂度，将一对多转化成了一对一。
 * 可将各个同事类对象进行解耦。
 * 符合迪米特原则。
 * 减少子类生成，中介者将原本分布于多个对象间的行为集中在一起，改变这些行为只需生成新的中介者子类即可，这使各个同事类可被重用，无须对同事类进行扩展。
 *
 * 缺点:
 * 在具体中介中包含了大量的同事类之间的交互细节，可能会使具体中介者非常复杂，使得系统难以维护。
 *
 * 场景：
 * 系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。
 * 想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。
 *
 * 应用：
 * MVC模式(其中的C，控制器就是一个中介者对象。M和V都和他打交道) – 窗口游戏程序，窗口软件开发中窗口对象也是一个中介者对象
 * 图形界面开发GUI中，多个组件之间的交互，可以通过引入一个中介者对象来解决，可以是整体的窗口对象或者DOM对象
 *
 * 扩展：
 * 在实际开发中，通常采用以下两种方法来简化中介者模式，使开发变得更简单。
 * 1. 不定义中介者接口，把具体中介者对象实现成为单例。
 * 2. 同事对象不持有中介者，而是在需要的时候直接获取中介者对象并调用。
 *
 * 中介者模式和外观模式
 * 中介者模式中，同事类必须依赖中介者，中介者也知道同事类
 * 外观模式中，子系统是不需要知道外观类的存在，并且子系统是可以脱离外观模式的
 *
 * 中介者模式和代理模式
 * 代理模式的核心就是代理作用，主要还是对原先的类进行扩展或增加控制，比如进行权限控制
 * 中介者模式主要目的是为了减少对象之前的耦合，也就是同事类直接相互独立，互不影响
 */
package me.sunny.demo.dp.behavioral.mediator;

