/**
 * # 策略模式 (Strategy Pattern)
 *
 * 定义一组算法，将每一个算法封装起来，从而使它们可以相互切换。
 * 一组算法，那就是不同的策略。
 * 这组算法都实现了相同的接口或者继承相同的抽象类，所以可以相互切换。
 *
 * 策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。
 *
 * ## 角色
 * * 封装角色
 * 上层访问策略的入口，它持有抽象策略角色的引用
 * * 抽象策略角色
 * 提供接口或者抽象类，定义策略组必须拥有的方法和属性。
 * * 具体策略角色
 * 实现抽象策略，定义具体的算法逻辑。
 *
 *
 * ## 分析
 *
 *
 * ## 场景
 * 1. 一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。
 * 2. 一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。
 * 3. 系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。
 * 4. 系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。
 * 5. 多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。
 *
 * ## 应用
 * *  Java SE 中的容器布局管理
 *
 * ## 扩展
 * * 策略工厂模式
 * 在一个使用策略模式的系统中，当存在的策略很多时，客户端管理所有策略算法将变得很复杂，
 * 如果在环境类中使用策略工厂模式来管理这些策略类将大大减少客户端的工作复杂度
 */
package me.sunny.demo.dp.oop.behavioral.strategy;